/*
 * User API
 *
 * An API for managing system users
 *
 * API version: 1.0.3
 * Contact: joe@jjssoftware.co.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A UserAPIApiController binds http requests to an api service and writes the service results to the http response
type UserAPIApiController struct {
	service UserAPIApiServicer
}

// NewUserAPIApiController creates a default api controller
func NewUserAPIApiController(s UserAPIApiServicer) Router {
	return &UserAPIApiController{ service: s }
}

// Routes returns all of the api route for the UserAPIApiController
func (c *UserAPIApiController) Routes() Routes {
	return Routes{ 
		{
			"AddUser",
			strings.ToUpper("Put"),
			"/jjssoftware/User_API/1.0.3/addUser",
			c.AddUser,
		},
		{
			"AuthenticateUser",
			strings.ToUpper("Post"),
			"/jjssoftware/User_API/1.0.3/authenticate",
			c.AuthenticateUser,
		},
		{
			"GetUserByUserId",
			strings.ToUpper("Get"),
			"/jjssoftware/User_API/1.0.3/getUser/{userId}",
			c.GetUserByUserId,
		},
		{
			"GetUserByUserName",
			strings.ToUpper("Get"),
			"/jjssoftware/User_API/1.0.3/getUser/{userName}",
			c.GetUserByUserName,
		},
	}
}

// AddUser - adds a new user
func (c *UserAPIApiController) AddUser(w http.ResponseWriter, r *http.Request) { 
	newUser := &NewUser{}
	if err := json.NewDecoder(r.Body).Decode(&newUser); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.AddUser(r.Context(), *newUser)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// AuthenticateUser - 
func (c *UserAPIApiController) AuthenticateUser(w http.ResponseWriter, r *http.Request) { 
	userCredentials := &UserCredentials{}
	if err := json.NewDecoder(r.Body).Decode(&userCredentials); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.AuthenticateUser(r.Context(), *userCredentials)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetUserByUserId - returns a user for a specific userId
func (c *UserAPIApiController) GetUserByUserId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	userId, err := parseInt32Parameter(params["userId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.GetUserByUserId(r.Context(), userId)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetUserByUserName - returns a user for a specific userName
func (c *UserAPIApiController) GetUserByUserName(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	userName := params["userName"]
	result, err := c.service.GetUserByUserName(r.Context(), userName)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
