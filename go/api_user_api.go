/*
 * User API
 *
 * An API for managing system users
 *
 * API version: 1.0.3
 * Contact: joe@jjssoftware.co.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserAPIApiController binds http requests to an api service and writes the service results to the http response
type UserAPIApiController struct {
	service      UserAPIApiServicer
	errorHandler ErrorHandler
}

// UserAPIApiOption for how the controller is set up.
type UserAPIApiOption func(*UserAPIApiController)

// WithUserAPIApiErrorHandler inject ErrorHandler into controller
func WithUserAPIApiErrorHandler(h ErrorHandler) UserAPIApiOption {
	return func(c *UserAPIApiController) {
		c.errorHandler = h
	}
}

// NewUserAPIApiController creates a default api controller
func NewUserAPIApiController(s UserAPIApiServicer, opts ...UserAPIApiOption) Router {
	controller := &UserAPIApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserAPIApiController
func (c *UserAPIApiController) Routes() Routes {
	return Routes{
		{
			"AddUser",
			strings.ToUpper("Put"),
			"/jjssoftware/User_API/1.0.3/addUser",
			c.AddUser,
		},
		{
			"AuthenticateUser",
			strings.ToUpper("Post"),
			"/jjssoftware/User_API/1.0.3/authenticate",
			c.AuthenticateUser,
		},
		{
			"GetUserByUserId",
			strings.ToUpper("Get"),
			"/jjssoftware/User_API/1.0.3/getUser/{userId}",
			c.GetUserByUserId,
		},
		{
			"GetUserByUserName",
			strings.ToUpper("Get"),
			"/jjssoftware/User_API/1.0.3/getUser/{userName}",
			c.GetUserByUserName,
		},
	}
}

// AddUser - adds a new user
func (c *UserAPIApiController) AddUser(w http.ResponseWriter, r *http.Request) {
	newUserParam := NewUser{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&newUserParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNewUserRequired(newUserParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddUser(r.Context(), newUserParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AuthenticateUser -
func (c *UserAPIApiController) AuthenticateUser(w http.ResponseWriter, r *http.Request) {
	userCredentialsParam := UserCredentials{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userCredentialsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserCredentialsRequired(userCredentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AuthenticateUser(r.Context(), userCredentialsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetUserByUserId - returns a user for a specific userId
func (c *UserAPIApiController) GetUserByUserId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam, err := parseInt32Parameter(params["userId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetUserByUserId(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetUserByUserName - returns a user for a specific userName
func (c *UserAPIApiController) GetUserByUserName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userNameParam := params["userName"]
	result, err := c.service.GetUserByUserName(r.Context(), userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
