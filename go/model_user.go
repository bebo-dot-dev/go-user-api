/*
 * User API
 *
 * An API for managing system users
 *
 * API version: 1.0.3
 * Contact: joe@jjssoftware.co.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"time"
)

type User struct {
	Id int32 `json:"id"`

	UniqueId string `json:"uniqueId"`

	CreateTimestamp time.Time `json:"createTimestamp"`

	UserName string `json:"userName"`

	FirstName string `json:"firstName"`

	Surname string `json:"surname"`
}

// AssertUserRequired checks if the required fields are not zero-ed
func AssertUserRequired(obj User) error {
	elements := map[string]interface{}{
		"id":              obj.Id,
		"uniqueId":        obj.UniqueId,
		"createTimestamp": obj.CreateTimestamp,
		"userName":        obj.UserName,
		"firstName":       obj.FirstName,
		"surname":         obj.Surname,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseUserRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of User (e.g. [][]User), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUser, ok := obj.(User)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUserRequired(aUser)
	})
}
